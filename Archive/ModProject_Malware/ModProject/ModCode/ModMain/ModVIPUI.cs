using System;
using System.Windows.Forms;
using UnhollowerRuntimeLib;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace MOD_OBF7hC
{
    public class ModVIPUI : MonoBehaviour
    {
        public const string Name = "ModVIPUI";
        public const string LicenseInfoContainerName = "LicenseInfoContainer";
        private static ModVIPUI m_instance;
        private GameObject licenseInfoContainer;
        public static ModVIPUI Instance => m_instance;
        public ModVIPUI(IntPtr ptr)
            : base(ptr)
        {
        }

        public static void OnUpdate()
        {
            if (!(m_instance != null))
            {
                GameObject gameObject;
                if (GameObject.Find("ModVIPUI") == null)
                {
                    gameObject = new GameObject("ModVIPUI");
                    gameObject.AddComponent<Canvas>().renderMode = RenderMode.ScreenSpaceOverlay;
                    gameObject.AddComponent<GraphicRaycaster>();
                    UnityEngine.Object.DontDestroyOnLoad(gameObject);
                }
                else
                {
                    gameObject = GameObject.Find("ModVIPUI");
                }
                ClassInjector.RegisterTypeInIl2Cpp<ModVIPUI>();
                if (gameObject.GetComponent<ModVIPUI>() == null)
                {
                    gameObject.AddComponent<ModVIPUI>();
                }
            }
        }

        private void Awake()
        {
            if (m_instance != null)
            {
                UnityEngine.Object.Destroy(base.gameObject);
            }
            else
            {
                m_instance = this;
            }
        }

        private void Start()
        {
            CreateLicenseInfo();
        }

        private void Update()
        {
            if ((Input.GetKey(KeyCode.LeftControl) || Input.GetKey(KeyCode.RightControl)) && Input.GetKeyDown(KeyCode.F1))
            {
                UITipItem.AddTip("SteamID has been copied. Go to the website to activate." + ModVIP.Instance.GetSteamID(), 1f);
                Clipboard.SetDataObject(ModVIP.Instance.GetSteamID());
            }
            if ((Input.GetKey(KeyCode.LeftControl) || Input.GetKey(KeyCode.RightControl)) && Input.GetKeyDown(KeyCode.F2))
            {
                UITipItem.AddTip("The machine code has been copied. Go to the website to activate." + ModVIP.Instance.GetMACAddress(), 1f);
                Clipboard.SetDataObject(ModVIP.Instance.GetMACAddress());
            }
        }

        private void CreateLicenseInfo()
        {
            GameObject gameObject = GetLicenseInfoContainer();
            if (gameObject.transform.Find("OBF7hC") == null)
            {
                Font font = Resources.Load<Font>("texture/font/heiti");
                Text text = new GameObject("OBF7hC").AddComponent<Text>();
                text.transform.SetParent(gameObject.transform);
                text.text = "Koala public version_V3.0：" + ModVIP.Instance.VerifyInfo() + " (" + ModVIP.Instance.GetExpire().ToString("yyyy-MM-dd HH:mm:ss") + ")";
                text.font = font;
                text.fontSize = 14;
                text.color = Color.white;
                text.alignment = TextAnchor.MiddleRight;
            }
            HideLicenseLabel();
        }

        private GameObject GetLicenseInfoContainer()
        {
            if (licenseInfoContainer == null)
            {
                if (base.transform.Find("LicenseInfoContainer") != null)
                {
                    licenseInfoContainer = base.transform.Find("LicenseInfoContainer").gameObject;
                }
                else
                {
                    licenseInfoContainer = new GameObject("LicenseInfoContainer");
                    licenseInfoContainer.transform.SetParent(base.transform);
                    licenseInfoContainer.AddComponent<Image>().color = new Color(1f, 0.8f, 0.1f, 1f);
                    RectTransform component = licenseInfoContainer.GetComponent<RectTransform>();
                    component.sizeDelta = new Vector2(500f, 20f);
                    component.pivot = new Vector2(1f, 1f);
                    component.anchorMin = new Vector2(1f, 1f);
                    component.anchorMax = new Vector2(1f, 1f);
                    component.anchoredPosition = new Vector3(0f, 0f);
                    component.localScale = new Vector3(1f, 1f, 1f);
                    GridLayoutGroup gridLayoutGroup = licenseInfoContainer.AddComponent<GridLayoutGroup>();
                    gridLayoutGroup.cellSize = new Vector2(480f, 20f);
                    gridLayoutGroup.padding.left = 10;
                    gridLayoutGroup.padding.right = 10;
                    ContentSizeFitter contentSizeFitter = licenseInfoContainer.AddComponent<ContentSizeFitter>();
                    contentSizeFitter.horizontalFit = ContentSizeFitter.FitMode.Unconstrained;
                    contentSizeFitter.verticalFit = ContentSizeFitter.FitMode.PreferredSize;
                    EventTrigger eventTrigger = licenseInfoContainer.AddComponent<EventTrigger>();
                    EventTrigger.Entry entry = new EventTrigger.Entry();
                    entry.eventID = EventTriggerType.PointerEnter;
                    entry.callback.AddListener((Action<BaseEventData>)delegate
                    {
                        ShowLicenseLabel();
                    });
                    eventTrigger.triggers.Add(entry);
                    EventTrigger.Entry entry2 = new EventTrigger.Entry();
                    entry2.eventID = EventTriggerType.PointerExit;
                    entry2.callback.AddListener((Action<BaseEventData>)delegate
                    {
                        HideLicenseLabel();
                    });
                    eventTrigger.triggers.Add(entry2);
                }
            }
            return licenseInfoContainer;
        }

        private void ShowLicenseLabel()
        {
            Image component = licenseInfoContainer.GetComponent<Image>();
            Color color = component.color;
            color.a = 0.3f;
            component.GetComponent<Image>().color = color;
            for (int i = 0; i < licenseInfoContainer.transform.childCount; i++)
            {
                licenseInfoContainer.transform.GetChild(i).gameObject.SetActive(value: true);
            }
        }

        private void HideLicenseLabel()
        {
            Image component = licenseInfoContainer.GetComponent<Image>();
            Color color = component.color;
            color.a = 0f;
            component.GetComponent<Image>().color = color;
            for (int i = 0; i < licenseInfoContainer.transform.childCount; i++)
            {
                if (i != 0)
                {
                    licenseInfoContainer.transform.GetChild(i).gameObject.SetActive(value: false);
                }
            }
        }
    }
}
