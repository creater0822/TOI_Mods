using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Net.NetworkInformation;
using System.Security.Cryptography;
using System.Text;
using HarmonyLib;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Steamworks;

namespace MOD_OBF7hC
{
    public class ModVIP
    {
        public class LicenseInfo
        {
            public string signature;
            public string modId;
            public string steamId;
            public int level;
            public string expire;
        }

        [HarmonyPatch(typeof(UnitCondition))]
        public class Patch_UnitCondition
        {
            [HarmonyPatch("Condition")]
            [HarmonyPrefix]
            public static bool Prefix_Condition(UnitCondition __instance, bool __result)
            {
                string condition = __instance.condition;
                if (condition == "0")
                {
                    return true;
                }
                if (condition.IndexOf("||") != -1)
                {
                    return true;
                }
                string text = "grade_0_1_10";
                string text2 = "grade_0_0_0";
                string[] array = condition.Split('|');
                for (int i = 0; i < array.Length; i++)
                {
                    string[] array2 = array[i].Split('_');
                    if (!(array2[0] == "modvip"))
                    {
                        continue;
                    }
                    string text3 = array2[1];
                    string text4 = array2[2];
                    int num = int.Parse(array2[3]);
                    if ("OBF7hC" == text3)
                    {
                        bool flag = false;
                        switch (text4)
                        {
                            case "=":
                                flag = Instance.Verify() == num;
                                break;
                            case "<":
                                flag = Instance.Verify() < num;
                                break;
                            case "<=":
                                flag = Instance.Verify() <= num;
                                break;
                            case ">":
                                flag = Instance.Verify() > num;
                                break;
                            case ">=":
                                flag = Instance.Verify() >= num;
                                break;
                        }
                        array[i] = (flag ? text : text2);
                    }
                }
                __instance.condition = string.Join("|", array);
                return true;
            }
        }

        public const string MOD_NAME = "考拉公开版本_V3.0"; // Koala public version_V3.0

        public const string MOD_ID = "OBF7hC";

        private const string PublicKey = "<RSAKeyValue><Modulus>jONpjVrlKNlcn7z4d41M/jm7WS+Lm/lpAq27X72LWmjnQppDFBar3GiSYDlBFairsTF0WWwFRmw4juIAmAEyw+ph9TNTUk1AsvYAldKYYyllz4xiE4iQxPc2YZfE+UmU8kpIhmQ2o4pFWzrzqwrA9Z3IE2zRMo9i0QWhnKSAykgLQ1qFir1xAx6Eb4uWsMTHLW+Dih6M6wgRalRrv+8Myvg//c+vKENgzKf3rOUmc9JXOL8u5dTURRiwl6f5RxlFI5xx3iQd8MKxDehH2Bq+QaeOgLqM406ya1XbV742Cr/V+XRWG5ZHchCJuB7EVUZeW0iFmx9CPMXGKx/ZM/Wbww==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>";

        private const string KeyFileName = "/ModAssets/License";

        private const bool UseMACAddress = false;

        private Dictionary<int, string> State_Names = new Dictionary<int, string>
        {
            [-2] = "已过期", // expired
            [-1] = "无效授权", // Invalid authorization
            [0] = "考拉", // koala
            [1] = "考拉S++3.0", // koala S++ 3.0
            [2] = "VIP会员", // VIP Member
            [3] = "SVIP会员", // SVIP Member
            [4] = "SSVIP会员" // SSVIP Member
        };

        public static ModVIP Instance = new ModVIP();

        private LicenseInfo licenseInfo;

        private int verifyState = -1;

        private void VerifyData(DateTime serverDatTime)
        {
            if (DateTime.Compare(GetExpire(), serverDatTime) < 0)
            {
                verifyState = -2;
            }
            else if (licenseInfo.modId != "OBF7hC")
            {
                verifyState = -1;
            }
            else if (licenseInfo.level >= 0)
            {
                string steamID = GetSteamID();
                string mACAddress = GetMACAddress();
                Console.WriteLine("SteamID = " + GetSteamID());
                Console.WriteLine("MAC = " + GetMACAddress());
                if (licenseInfo.steamId != steamID && licenseInfo.steamId != mACAddress)
                {
                    verifyState = -1;
                }
            }
        }

        private ModVIP()
        {
            LoadKeyFile();
        }

        public int Verify()
        {
            if (verifyState >= 0)
            {
                return licenseInfo.level;
            }
            return verifyState;
        }

        public string VerifyInfo()
        {
            if (State_Names.TryGetValue(Verify(), out var value))
            {
                return value;
            }
            return "mistake";
        }

        public string GetLevelName()
        {
            if (licenseInfo != null && State_Names.TryGetValue(licenseInfo.level, out var value))
            {
                return value;
            }
            return "mistake";
        }

        public DateTime GetExpire()
        {
            if (licenseInfo == null)
            {
                return default(DateTime);
            }
            return Convert.ToDateTime(licenseInfo.expire);
        }

        public string GetSteamID()
        {
            return SteamApps.GetAppOwner().m_SteamID.ToString() ?? "";
        }

        public string GetMACAddress()
        {
            string text = "";
            NetworkInterface[] allNetworkInterfaces = NetworkInterface.GetAllNetworkInterfaces();
            foreach (NetworkInterface networkInterface in allNetworkInterfaces)
            {
                if (networkInterface.NetworkInterfaceType == NetworkInterfaceType.Ethernet || networkInterface.NetworkInterfaceType == NetworkInterfaceType.Wireless80211)
                {
                    text = networkInterface.GetPhysicalAddress().ToString();
                    break;
                }
            }
            try
            {
                text = text.Insert(2, ":").Insert(5, ":").Insert(8, ":")
                    .Insert(11, ":")
                    .Insert(14, ":");
            }
            catch (Exception)
            {
            }
            return text;
        }

        private void LoadKeyFile()
        {
            string text = g.mod.GetModPathRoot("OBF7hC") + "/ModAssets/License";
            Console.WriteLine("Load license path #############" + text + "##############");
            if (File.Exists(text))
            {
                if ((File.GetAttributes(text) & FileAttributes.ReadOnly) == FileAttributes.ReadOnly)
                {
                    Console.WriteLine("The secret key is a read-only attribute. Please modify the License file attribute to non-read-only.");
                }
                else
                {
                    Console.WriteLine("The secret key is not a read-only property");
                }
            }
            else
            {
                Console.WriteLine("The secret key is not installed to the specified path and the secret key does not exist.");
            }
            if (File.Exists(text))
            {
                string text2 = FileTool.ReadText(text);
                Console.WriteLine("Load authorization information -> " + text2);
                licenseInfo = JsonConvert.DeserializeObject<LicenseInfo>(text2);
                VerifySignature();
                if (verifyState == 0)
                {
                    string result = new HttpClient().GetStringAsync("http://api.m.taobao.com/rest/api3.do?api=mtop.common.getTimestamp").GetAwaiter().GetResult();
                    Console.WriteLine("date=" + result);
                    string s = (string)JObject.Parse(result)["data"]["t"];
                    VerifyData(GetDateTimeMilliseconds(long.Parse(s)));
                }
            }
        }

        private void VerifySignature()
        {
            string s = licenseInfo.modId + "|" + licenseInfo.steamId + "|" + licenseInfo.level + "|" + licenseInfo.expire;
            byte[] bytes = Encoding.UTF8.GetBytes(s);
            byte[] signature = Convert.FromBase64String(licenseInfo.signature);
            using (RSACryptoServiceProvider rSACryptoServiceProvider = new RSACryptoServiceProvider())
            {
                rSACryptoServiceProvider.FromXmlString("<RSAKeyValue><Modulus>jONpjVrlKNlcn7z4d41M/jm7WS+Lm/lpAq27X72LWmjnQppDFBar3GiSYDlBFairsTF0WWwFRmw4juIAmAEyw+ph9TNTUk1AsvYAldKYYyllz4xiE4iQxPc2YZfE+UmU8kpIhmQ2o4pFWzrzqwrA9Z3IE2zRMo9i0QWhnKSAykgLQ1qFir1xAx6Eb4uWsMTHLW+Dih6M6wgRalRrv+8Myvg//c+vKENgzKf3rOUmc9JXOL8u5dTURRiwl6f5RxlFI5xx3iQd8MKxDehH2Bq+QaeOgLqM406ya1XbV742Cr/V+XRWG5ZHchCJuB7EVUZeW0iFmx9CPMXGKx/ZM/Wbww==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>");
                if (rSACryptoServiceProvider.VerifyData(bytes, new SHA256CryptoServiceProvider(), signature))
                {
                    verifyState = 0;
                    return;
                }
                verifyState = -1;
                Console.WriteLine("License file is invalid");
            }
        }

        public static DateTime GetDateTimeMilliseconds(long timestamp)
        {
            long num = timestamp * 10000;
            long ticks = new DateTime(1970, 1, 1, 8, 0, 0).Ticks + num;
            return new DateTime(ticks);
        }
    }
}
